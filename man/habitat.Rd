% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/habitat-class.R
\name{as.habitat}
\alias{as.habitat}
\alias{is.habitat}
\alias{print.habitat}
\alias{area}
\alias{area<-}
\alias{as.population}
\alias{is.population}
\alias{population}
\alias{population<-}
\alias{pop_patch_name}
\alias{features}
\alias{features<-}
\alias{spatial_patches}
\alias{spatial_patches<-}
\alias{suitability}
\alias{suitability<-}
\alias{coords}
\alias{coords<-}
\alias{distance}
\alias{is.distance}
\alias{[[.habitat}
\alias{carrying_capacity}
\title{habitat objects}
\usage{
as.habitat(patches)

is.habitat(x)

\method{print}{habitat}(x, ...)

area(habitat)

area(habitat) <- value

as.population(x, ...)

is.population(x)

population(habitat)

population(habitat) <- value

pop_patch_name(habitat)

features(habitat)

features(habitat) <- value

spatial_patches(habitat)

spatial_patches(habitat, newpatch) <- value

suitability(habitat)

suitability(habitat, newpatch) <- value

coords(habitat)

coords(habitat) <- value

distance(habitat)

is.distance(x)

\method{[[}{habitat}(x, i)

carrying_capacity(x, type = c("exp", "logit", "linear", "custom"), ...)
}
\arguments{
\item{patches}{an object to turn into a \code{habitat} object. Currently
this can either be a \link[raster]{raster}, a list or \code{NULL} (see \code{details}),
though more approaches will be added in the future}

\item{x}{an object to print or test as a habitat object}

\item{\dots}{further arguments passed to or from other methods.}

\item{habitat}{an object of class \code{habitat}}

\item{i}{index specifying the patches to include in the subset
\code{habitat} object}

\item{type}{model form for converting occurrence to carrying capacity.}

\item{x}{a vector, data.frame or matrix of population(s) numbers for each stage(s) and each patch(s)}

\item{x}{a raster of species habitit suitability (occupancy).}

\item{list}{parameters used to convert a habitat suitability map to carrying capacity.}
}
\value{
an object of class \code{habitat}, essentially a dataframe
  containing the coordinates, area, population and features (as columns) for
  each patch (rows)
}
\description{
Underlying habitat for dhmpr.
}
\details{
the accessor functions \code{distance}, \code{area},
  \code{population} and \code{features} either return or set corresponding
  sub-dataframes of the \code{habitat} object
}
\examples{
library(raster)
library(dhmpr)
set.seed(42)
xy <- expand.grid(x=seq(145, 150, 0.1), y=seq(-40, -35, 0.1))
Dd <- as.matrix(dist(xy))
w <- exp(-1/nrow(xy) * Dd)
Ww <- chol(w)
xy$z <- t(Ww) \%*\% rnorm(nrow(xy), 0, 0.1)
coordinates(xy) <- ~x+y
r <- rasterize(xy, raster(points2grid(xy)), 'z')
proj4string(r) <- '+init=epsg:4283'

#'# create a habitat from a list containing a raster that represents a habitat suitability model / species distribution model.
habs <- as.habitat(list(r,population = as.population(t(rmultinom(1, 
                               size = 100, prob = c(0.8,0.2,0.01))))))
                               
#create a habitat from a list containing just a species distribution model will estimate populations per-patch.
habs <- as.habitat(list(r2))

# create a default habitat
habs <- as.habitat(NULL)

# create a multipatch habitat
patches <- list(coordinates = data.frame(x=runif( 10, min=-10, max=10),
                                                    y=runif( 10, min=-10, max=10)),
                               area = as.data.frame(exp(-seq(.1,10,length.out = 10))*10),
                               population = as.population(data.frame('larvae'=80,'juvenile'=29,'adult'=5)),
                               features = data.frame(temperature = 10))
habs <- as.habitat(patches)
                               
# print method
print(habitat)

# get and set the area
area(habitat)

# starting population numbers for each step in the demographic function
population <- as.population(c(80,30,10))
population <- as.population(t(rmultinom(10, size = 100, prob = c(0.8,0.2,0.01))))
population <- as.population(c(80,30,10))
is.population(population)
# get and set the population
population(habitat)
population(habitat) <- population(habitat) * 2
population(habitat)

# get and set the features
features(habitat)
# get and set the features
spatial_patches(habitat)

# get and set the features
suitability(habitat)

# get and set the features
coordinates(habitat)

# get and set the distance matrix
distance(habitat)

# habitats can be subsetted to get sub-habitats of patches with double
# braces
habitat
habitat[[1]]
habitat[[1:2]]

}
\author{
Nick Golding

Skipton Woolley
}
