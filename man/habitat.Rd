% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/habitat-class.R
\name{as.habitat}
\alias{as.habitat}
\alias{is.habitat}
\alias{print.habitat}
\alias{as.habitat_suitability}
\alias{is.habitat_suitability}
\alias{habitat_suitability}
\alias{habitat_suitability<-}
\alias{as.populations}
\alias{is.populations}
\alias{populations}
\alias{populations<-}
\alias{patches}
\alias{as.carrying_capacity}
\alias{is.carrying_capacity}
\alias{carrying_capacity}
\alias{carrying_capacity<-}
\alias{area}
\title{habitat objects}
\usage{
as.habitat(features, ...)

is.habitat(x)

\method{print}{habitat}(x, ...)

as.habitat_suitability(x, ...)

is.habitat_suitability(x)

habitat_suitability(habitat, time_step = 1)

habitat_suitability(habitat, time_step = 1) <- value

as.populations(x, ...)

is.populations(x)

populations(habitat, which_stages = NULL)

populations(habitat, which_stages = NULL) <- value

patches(habitat, which_stages = NULL)

as.carrying_capacity(x, ...)

is.carrying_capacity(x)

carrying_capacity(habitat)

carrying_capacity(habitat) <- value

area(habitat)
}
\arguments{
\item{features}{A named list of landscapes (or seascape) features and parameters used for setting up the habitat for dynamic meta-population models.}

\item{\dots}{further arguments passed to or from other methods.}

\item{x}{an object to print or test as a habitat object}

\item{x}{a raster, raster stack or raster brick of habitat suitability for the species.}
}
\value{
an object of class \code{habitat}.
}
\description{
Habitat is an object that contains the spatial distribution of the populations, habitat suitability and carrying capacity for the landscape or seascape. Habitat requires either predefined rasters of population size for each life-history, habitat suitability map (e.g. a species distribution model) and carrying capacity. However, habitat suitability map is the only mandatory raster, population and carrying capacity can be provided as numeric values or functions which manipulate the habitat suitability map rasters to generate population per-cell and/or carrying capacity per-cell.

carrying_capacity_function <- function(x,type=c('exp','logit','linear','custom'),...){
  print(as.list(match.call(x)))
  type <- match.arg(type)
  switch(type,
    exp = exp((a*x)-b),
    linear = a*(x)-b,
    logit = a+(1/(1+exp(-b*x+c))),
    custom = custom_fun)
}
}
\examples{

library(raster)
library(dhmpr)
set.seed(42)
xy <- expand.grid(x=seq(145, 150, 0.1), y=seq(-40, -35, 0.1))
Dd <- as.matrix(dist(xy))
w <- exp(-1/nrow(xy) * Dd)
Ww <- chol(w)
xy$z <- t(Ww) \%*\% rnorm(nrow(xy), 0, 0.1)
coordinates(xy) <- ~x+y
r <- rasterize(xy, raster(points2grid(xy)), 'z')
proj4string(r) <- '+init=epsg:4283'
r[] <- scales::rescale(r[],to=c(0,1))
## r <- disaggregate(r,10)

## create a habitat from a list containing a habitat suitability raster and numeric values for population and carrying capacity.
hsm <- as.habitat_suitability(r)
pops <- as.populations(c(80,20,10))
cc <- as.carrying_capacity(300)

features <- list(hsm,pops,cc)
habitat <- as.habitat(features)
                       
## create a habitat from a list containing a habitat suitability raster, a SpatialPointsDataFrame for population and numeric values carrying capacity.
random_populations <- sampleRandom(r, size=50, na.rm=TRUE, sp=TRUE) 
random_populations@data <- as.data.frame(t(rmultinom(50, size = 100, prob = c(0.8,0.2,0.1))))
features <- list('habitat_suitability_map'=as.habitat_suitability(r),
                 'population'=as.populations(random_populations),
                 'carrying_capacity'=as.carrying_capacity(100))
                                                
habitat <- as.habitat(features)
# print method
print(habitat)
 
# Underlying habitat suitability map
hsm <- as.habitat_suitability(r)

is.habitat_suitability(hsm)

habitat_suitability(habitat)

as.populations(c(80,60,20))

is.populations(pops)

# get and set the population
populations(habitat)
populations(habitat) <- populations(habitat) * 2
populations(habitat)

# get population values at patches (cells)
patches(habitat)

as.carrying_capacity(100)

is.carrying_capacity(cc)

# get and set the carrying capacity
carrying_capacity(habitat)
carrying_capacity(habitat) <- carrying_capacity(habitat) * 2
carrying_capacity(habitat)

# get cell area
area(habitat)
}
\author{
Nick Golding & Skip Woolley
}
