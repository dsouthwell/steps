% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/demography_dynamics-class.R
\name{as.demography_dynamics}
\alias{as.demography_dynamics}
\alias{is.demography_dynamics}
\alias{print.demography_dynamics}
\alias{demography_dynamics}
\alias{demo_environmental_stochasticity}
\alias{demo_density_dependence}
\alias{deterministic_surv_fec}
\title{Change the demography in a state object}
\usage{
as.demography_dynamics(demography_dynamics_function)

is.demography_dynamics(x)

\method{print}{demography_dynamics}(x, ...)

demography_dynamics(env_stoch = NULL, determ_surv_fec = NULL,
  demo_dens_dep = NULL)

demo_environmental_stochasticity(transition_matrix, stochasticity = 0)

demo_density_dependence(fecundity_fraction = 1, survival_fraction = 1)

deterministic_surv_fec(global_transition_matrix, surv_layers, fec_layers)
}
\arguments{
\item{demography_dynamics_function}{A function that operates on a state object to change demography at specified timesteps. User may enter a custom function or select a pre-defined module - see examples.}

\item{x}{an object to print or test as an demography_dynamic object}

\item{...}{further arguments passed to or from other methods}

\item{env_stoch}{a function for adding environmental stochasticity to the global transition matrix at each timestep}

\item{determ_surv_fec}{a function for altering a life-stage transition matrix with user supplied spatial layers at each timestep}

\item{demo_dens_dep}{a function for modifying the transition matrix at each timestep when carrying capacity is reached}

\item{transition_matrix}{a life-stage transition matrix}

\item{stochasticity}{a matrix with standard deviations (consistent or varying) around the transition means with matching dimensions as the life-stage transition matrix or a number representing a consitent standard deviation to apply to all transitions (default is 0)}

\item{fecundity_fraction}{a multiplier value between 0 and 1 for fecundity values in the transition matrix}

\item{survival_fraction}{a multiplier value between 0 and 1 for fecundity values in the transition matrix}

\item{surv_layers}{a list of raster stacks with multipliers for survival equal to the number of life-stages}

\item{fec_layers}{a list of raster stacks with multipliers for fecundities equal to the number of life-stages. Note, life-stages that do not reproduce will have NULL in place of the raster stack}
}
\value{
An object of class \code{demography_dynamics}
}
\description{
A 'demography dynamics' object is used to modify life-stage transition matrices - adding stochasticity for example.
It is a sub-component of a \link[steps]{dynamics} object and is executed in each timestep of an experiment.
}
\examples{

library(steps)
library(raster)

r <- raster(system.file("external/test.grd", package="raster"))

mat <- matrix(c(0.000,0.000,0.302,0.302,
                0.940,0.000,0.000,0.000,
                0.000,0.884,0.000,0.000,
                0.000,0.000,0.793,0.793),
              nrow = 4, ncol = 4, byrow = TRUE)
colnames(mat) <- rownames(mat) <- c('Stage_1','Stage_2','Stage_3','Stage_4')

mat_sd <- matrix(c(0.000,0.000,1,1,
                1,0.000,0.000,0.000,
                0.000,1,0.000,0.000,
                0.000,0.000,1,1),
              nrow = 4, ncol = 4, byrow = TRUE)
colnames(mat_sd) <- rownames(mat_sd) <- c('Stage_1','Stage_2','Stage_3','Stage_4')

pop <- stack(replicate(4, ceiling(r * 0.2)))

r2 <- r
r2[na.omit(r2)] <- sample(r[na.omit(r)])

r3 <- r
r3[na.omit(r3)] <- sample(r[na.omit(r)])

surv <- list(stack(r2, r2, r2),
             stack(r2, r2, r2),
             stack(r2, r2, r2),
             stack(r2, r2, r2))
             
fec <- list(NULL,
            NULL,
            stack(r3, r3, r3),
            stack(r3, r3, r3))

test_habitat <- build_habitat(habitat_suitability = r / cellStats(r, "max"),
                              carrying_capacity = ceiling(r * 0.1))
test_demography <- build_demography(transition_matrix = mat,
                                    dispersal_parameters = rlnorm(1))
test_population <- build_population(pop)

test_state <- build_state(test_habitat, test_demography, test_population)

# Create a generic function that simply returns an unmodified state
# object at each timestep

example_function <- function (state, timestep) {
  state
}

# Define the function as a demography_dynamics object

example_function <- as.demography_dynamics(example_function)

# Test if object is of the type 'demography dynamics'
  
is.demography_dynamics(example_function)

# Print details about the demography_dynamics object

print(example_function)

# Use the demography_dynamics function to modify a demography object:

env_stoch <- demo_environmental_stochasticity(global_transition_matrix = mat,
                                             stochasticity = mat_sd)

example_function <- demography_dynamics(env_stoch,
                                        demo_dens_dep =  demo_density_dependence())

# Use the demo_environmental_stochasticity function to modify the transition
# matrix with specified environmental stochasticity:

test_demo_es <- demo_environmental_stochasticity(global_transition_matrix = mat,
                                    stochasticity = mat_sd)

# Use the demo_density_dependence function to modify the transition
# matrix once carrying capacity is reached:

test_demo_dd <- demo_density_dependence(fecundity_fraction = 1,
                                                survival_fraction = 0.5)

# Use the deterministic_surv_fec function to modify the  
# demography using explicit survival and fecundity layers:

test_survfec <- deterministic_surv_fec(global_transition_matrix = mat,
                                    surv_layers = surv,
                                    fec_layers = fec)
}
