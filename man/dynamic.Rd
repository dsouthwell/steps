% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dynamic-class.R
\name{dynamic}
\alias{as.matrix.dynamic}
\alias{dispersal}
\alias{dispersal<-}
\alias{dynamic}
\alias{habitat}
\alias{habitat<-}
\alias{is.dynamic}
\alias{print.dynamic}
\alias{transition}
\alias{transition<-}
\title{dynamic object}
\usage{
dynamic(...)

is.dynamic(x)

\method{print}{dynamic}(x, ...)

habitat(dynamic)

habitat(dynamic) <- value

transition(dynamic)

transition(dynamic) <- value

dispersal(dynamic)

dispersal(dynamic) <- value

\method{as.matrix}{dynamic}(dynamic, ...)
}
\arguments{
\item{x}{an object to print or test as a habitat object}

\item{dynamic}{an object of class \code{dynamic}}

\item{value}{an object of class \code{habitat} (for
\code{habitat(dynamic) <- value}) or the value to assign to the
\code{distance}, \code{area}, \code{population}, or \code{features}
elements of a \code{habitat} object}

\item{dots}{that can contain:
transition a transition object, See \link[dhmpr]{as.transition}.
population a population object, see \link[dhmpr]{as.population}
habitat a habitat object, see \link[dhmpr]{as.habitat}.
dispersal a dispersal object, see \link[dhmpr]{as.dispersal}. 
module a module object, see \link[dhmpr]{as.module}.
custom a function to manipulate transition, population, habitat, or dispersal see 'custom function'. \code{as.customfun}.}

\item{\dots}{further arguments passed to or from other methods.}
}
\description{
code{dynamic} is an object which stores all the relevent 
transitions, population(s), habitat, dispersal and module objects for use in \link[dhmpr]{simulation} function.
The main difference between \link[pop]{dynamic} and \code{dynamic} is that dhmpr requires the input of set objects to run.
}
\examples{

## Create transition matrix
mat <- matrix(c(.53,0,.52,0.1,0.77,0,0,0.12,0.9),nrow = 3,ncol = 3,byrow = TRUE)
colnames(mat) <- rownames(mat) <- c('larvae','juvenile','adult')
trans <- as.transition(mat)

## Create population
pop <- as.population(data.frame('larvae'=80,'juvenile'=29,'adult'=5) )

## Create habitat
library(raster)
set.seed(42)
xy <- expand.grid(x=seq(145, 150, 0.1), y=seq(-40, -35, 0.1))
Dd <- as.matrix(dist(xy))
w <- exp(-1/nrow(xy) * Dd)
Ww <- chol(w)
xy$z <- t(Ww) \%*\% rnorm(nrow(xy), 0, 0.1)
coordinates(xy) <- ~x+y
r <- rasterize(xy, raster(points2grid(xy)), 'z')
hab <- raster(r)
res(hab) <- 0.01
hab <- resample(r, hab)
proj4string(hab) <- '+init=epsg:4283'
habs <- as.habitat(list(hab,population = pop))
## Create dispersal
dispersal_params <- list(alpha=list('larvae'=2,'juvenile'=0,'adult'=3),
               probability=list('larvae'=0.2,'juvenile'=0,'adult'=0.6))

disp <- as.dispersal(dispersal_params)

## create a module for manipulating the landscape see \\link[dhmpr]{as.module} for more details.
fun <- fire_spread

##Create a named list with corresponding parameters and values
module_params = list(habitat=habs,
             fire_start_location = sample(ncell(suitability(habs)),10),
             prob = 0.24,
             continue_to_burn_prob = 0.01)
              
fire_module <- as.module(fun,module_params)    

## simple transition matrix and population as a dynamic object
population_dynamics <- dynamic(trans,pop)

## simple transition matrix, population and habitat as a dynamic object
population_habitat_dynamics <- dynamic(trans,pop,habs) 

## because habitat contrains population information we can drop pop
population_habitat_dynamics <- dynamic(trans,habs)

## add dispersal 
pop_hab_dynamics_w_dispersal <- dynamic(trans,habs,disp)

## add module 
pop_hab_disp_dynamics_w_module <- dynamic(trans,habs,disp,fire_module)
# print method
print(population_dynamics)

}

