% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/demography-class.R
\name{build_demography}
\alias{build_demography}
\alias{is.demography}
\alias{print.demography}
\alias{summary.demography}
\alias{plot.demography}
\title{Create a demography object to use in a state object}
\usage{
build_demography(transition_matrix, type = "global",
  habitat_suitability = NULL, dispersal_parameters, misc = NULL, ...)

is.demography(x)

\method{print}{demography}(x, ...)

\method{summary}{demography}(object, ...)

\method{plot}{demography}(x, ...)
}
\arguments{
\item{transition_matrix}{a symmetrical stage-based population structure matrix}

\item{type}{scale of transition matrix - either 'global' or 'local' (cell-based)}

\item{habitat_suitability}{habitat suitability raster layer (required if 'local' type is specified)}

\item{dispersal_parameters}{specifications for dispersal in the landscape}

\item{misc}{miscellaneous inputs used to modify demography}

\item{...}{further arguments passed to or from other methods}

\item{x}{a demography object}

\item{object}{a demography object}
}
\value{
An object of class \code{demography}
}
\description{
A demography object is used to store information on how populations change in space and time.
This includes life-stage matrices and parameters to control dispersal.
It is a sub-component of a \link[steps]{state} object and is modified in each timestep of an experiment.
}
\examples{

library(steps)
library(raster)

# Use a built-in function to generate a four life-stage transition matrix

mat <- steps:::fake_transition_matrix(4)

# Provide a list of dispersal parameters

params <- list(rlnorm(1),c(1:4))

# Construct the demography object.

test_demography <- build_demography(transition_matrix = mat, dispersal_parameters = params)

# Test if object is of the type 'population'

is.demography(test_demography)

# Print information about the 'demography' object

print(test_demography)

# Print a summary of 'demography' object attributes

summary(test_demography)

# Plot the 'demography' object

plot(test_demography)
}
