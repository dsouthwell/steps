% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/demography-class.R
\name{demography}
\alias{demography}
\alias{is.demography}
\alias{print.demography}
\alias{summary.demography}
\alias{plot.demography}
\title{Create a demography object to use in a state object.}
\usage{
demography(transition_matrix, scale = "global",
  habitat_suitability = NULL, misc = NULL, ...)

is.demography(x)

\method{print}{demography}(x, ...)

\method{summary}{demography}(object, ...)

\method{plot}{demography}(x, ...)
}
\arguments{
\item{transition_matrix}{A symmetrical age-based (Leslie) or stage-based
population structure matrix.}

\item{scale}{The scale to which the transition matrix is applied - either
'global' for a landscape-wide application or 'local' for a grid cell-based
applications. The default value is 'global'.}

\item{habitat_suitability}{A spatial raster (grid cell-based) layer that
is of the appropriate extent and resolution for the simulation (required
if 'local' scale is specified).}

\item{misc}{Miscellaneous inputs used to modify the demography object in a
simulation. Note, this is where the user may store objects that are called
upon and modified by demographic dynamic functions (also created by the user).}

\item{...}{Further arguments passed to or from other methods.}

\item{x}{A demography object (test or print).}

\item{object}{A demography object (summary).}
}
\value{
An object of class \code{demography}
}
\description{
A demography object contains information on how population
demographics change in space and time.
}
\details{
A demography object is a sub-component of a \link[steps]{state} object
and is modified in each timestep of a simulation. During a simulation,
a demography object tracks changes in life-stage matrices (either global
for the entire landscape or local to grid cells) based on demographic
dynamic functions selected or created by the user.
}
\examples{

library(steps)
library(raster)

# Construct the demography object
dem <- demography(transition_matrix = egk_mat)

# Test if object is of the type 'demography'
is.demography(test_demography)

# Print information about the 'demography' object
print(test_demography)

# Print a summary of 'demography' object attributes
summary(test_demography)

# Plot the 'demography' object
plot(test_demography)
}
