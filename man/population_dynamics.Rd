% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/population_dynamics-class.R
\name{as.population_dynamics}
\alias{as.population_dynamics}
\alias{is.population_dynamics}
\alias{print.population_dynamics}
\title{Change the population in a state object}
\usage{
as.population_dynamics(population_dynamics_function)

is.population_dynamics(x)

\method{print}{population_dynamics}(x, ...)
}
\arguments{
\item{population_dynamics_function}{A function that operates on a state object to change population at specified timesteps. User may enter a custom function or select a pre-defined module - see documentation.}

\item{x}{a population_dynamic object}

\item{...}{further arguments passed to or from other methods}
}
\value{
An object of class \code{population_dynamics}
}
\description{
A 'population dynamics' object is used to modify species populations in space and time.
It is a sub-component of a \link[dhmpr]{dynamics} object and is executed in each timestep of an experiment.
}
\examples{

library(dhmpr)
library(raster)

example_function <- function (state, timestep) {

population_raster <- state$population$population_raster
dispersal_parameters <- state$demography$dispersal_parameters
transition_matrix <- state$demography$transition_matrix

#  get population as a matrix
idx <- which(!is.na(getValues(population_raster[[1]])))
population <- extract(population_raster, idx)

# do population change
population <- population \%*\% transition_matrix

# do dispersal
locations <- raster::xyFromCell(population_raster, idx)
resolution <- mean(res(population_raster))
dispersal_decay <- dispersal_parameters * resolution

dispersal <- dispersal_matrix(locations, dispersal_decay)
population <- dispersal \%*\% population

# put back in the raster
population_raster[idx] <- population

state$population$population_raster <- population_raster
state
}

fast_population_dynamics <- as.population_dynamics(example_function)

# Test if object is of the type 'population dynamics'
  
is.population_dynamics(fast_population_dynamics)

print(fast_population_dynamics)
}
