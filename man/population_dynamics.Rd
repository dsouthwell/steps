% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/population_dynamics-class.R
\name{as.population_dynamics}
\alias{as.population_dynamics}
\alias{is.population_dynamics}
\alias{print.population_dynamics}
\alias{fast_population_dynamics}
\alias{ca_dispersal_population_dynamics}
\alias{fft_dispersal_population_dynamics}
\alias{translocation_population_dynamics}
\title{Change the population in a state object}
\usage{
as.population_dynamics(population_dynamics_function)

is.population_dynamics(x)

\method{print}{population_dynamics}(x, ...)

fast_population_dynamics()

ca_dispersal_population_dynamics()

fft_dispersal_population_dynamics()

translocation_population_dynamics(source_layer, sink_layer, stages = NULL,
  effect_timesteps = NULL)
}
\arguments{
\item{population_dynamics_function}{A function that operates on a state object to change population at specified timesteps. User may enter a custom function or select a pre-defined module - see documentation.}

\item{x}{a population_dynamic object}

\item{...}{further arguments passed to or from other methods}

\item{source_layer}{a spatial layer with the locations and number of individuals to translocate from - note, this layer will only have zero values if individuals are being introduced from outside the study area}

\item{sink_layer}{a spatial layer with the locations and number of individuals to translocate to}

\item{stages}{which life-stages are affected by the translocations - note, default is all}

\item{effect_timesteps}{which timesteps in a single simulation do the translocations take place}
}
\value{
An object of class \code{population_dynamics}
}
\description{
A 'population dynamics' object is used to modify species populations in space and time.
It is a sub-component of a \link[steps]{dynamics} object and is executed in each timestep of an experiment.
}
\examples{

library(steps)
library(raster)

r <- raster(system.file("external/test.grd", package="raster"))

mat <- matrix(c(0.000,0.000,0.302,0.302,
                0.940,0.000,0.000,0.000,
                0.000,0.884,0.000,0.000,
                0.000,0.000,0.793,0.793),
              nrow = 4, ncol = 4, byrow = TRUE)
colnames(mat) <- rownames(mat) <- c('Stage_1','Stage_2','Stage_3','Stage_4')

pop <- stack(replicate(4, ceiling(r * 0.2)))

pop_source <- r
pop_source[!is.na(r)] <- 0
pop_source[!is.na(r) & r >= 1200] <- 100

pop_sink <- r
pop_sink[!is.na(r)] <- 0
pop_sink[sample(which(!is.na(getValues(r)) & getValues(r) < 200),
                length(pop_source[!is.na(r) & r >= 1200]))] <- 100

hab_suit <- r / cellStats(r, "max")

k <- ceiling(hab_suit * 10)

dp_params <- list(dispersal_distance=list('Stage_1'=0,
                                          'Stage_2'=10,
                                          'Stage_3'=10,
                                          'Stage_4'=0),
                  dispersal_kernel=list('Stage_1'=0,
                                        'Stage_2'=exp(-c(0:9)^1/3.36),
                                        'Stage_3'=exp(-c(0:9)^1/3.36),
                                        'Stage_4'=0),
                  dispersal_proportion=list('Stage_1'=0,
                                            'Stage_2'=0.35,
                                            'Stage_3'=0.35*0.714,
                                            'Stage_4'=0)
                  )

test_habitat <- build_habitat(habitat_suitability = hab_suit,
                              carrying_capacity = k)
test_demography <- build_demography(transition_matrix = mat,
                                    dispersal_parameters = rlnorm(1))

test_demography_dp <- build_demography(transition_matrix = mat,
                                    dispersal_parameters = dp_params)
test_population <- build_population(pop)

test_state <- build_state(test_habitat, test_demography, test_population)

test_state_dp <- build_state(test_habitat,
                             test_demography_dp,
                             test_population)
                             
example_function <- function (state, timestep) {
  state
}

example_function <- as.population_dynamics(example_function)

# Test if object is of the type 'population dynamics'
  
is.population_dynamics(example_function)

print(example_function)

# Use the fast_population_dynamics object to modify the  
# population using life-stage transitions and dispersal:

population_dynamics <- fast_population_dynamics()
test_state2 <- population_dynamics(test_state, 1)

par(mfrow=c(1,2))
plot(test_state$population$population_raster[[2]])
plot(test_state2$population$population_raster[[2]])

# Use the ca_population_dynamics object to modify the  
# population using life-stage transitions, density-dependence,
# and cellular-automata based dispersal:

population_dynamics <- ca_dispersal_population_dynamics()
test_state_dp2 <- population_dynamics(test_state_dp, 1)

par(mfrow=c(1,2))
plot(test_state_dp$population$population_raster[[2]])
plot(test_state_dp2$population$population_raster[[2]])

population_dynamics <- fft_dispersal_population_dynamics()
test_state_dp2 <- population_dynamics(test_state_dp, 1)

par(mfrow=c(1,2))
plot(test_state_dp$population$population_raster[[2]])
plot(test_state_dp2$population$population_raster[[2]])

# Use the translocation_population_dynamics object to modify the  
# population using translocations:

population_dynamics <- translocation_population_dynamics(source_layer = pop_source,
                                                         sink_layer = pop_sink,
                                                         stages = NULL,
                                                         effect_timesteps = 1)
test_state_dp2 <- population_dynamics(test_state_dp, 1)

par(mfrow=c(1,2))
plot(test_state_dp$population$population_raster[[2]])
plot(test_state_dp2$population$population_raster[[2]])
}
