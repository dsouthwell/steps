% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/population_dynamics-class.R
\name{as.population_dynamics}
\alias{as.population_dynamics}
\alias{is.population_dynamics}
\alias{print.population_dynamics}
\alias{population_dynamics}
\alias{simple_growth}
\alias{demographic_stochasticity}
\alias{simple_dispersal}
\alias{kernel_function_dispersal}
\alias{cellular_automata_dispersal}
\alias{fast_fourier_dispersal}
\alias{pop_translocation}
\alias{pop_density_dependence}
\title{Change the population in a state object}
\usage{
as.population_dynamics(population_dynamics_function)

is.population_dynamics(x)

\method{print}{population_dynamics}(x, ...)

population_dynamics(pop_change = simple_growth(), pop_disp = NULL,
  pop_mod = NULL, pop_dens_dep = NULL)

simple_growth()

demographic_stochasticity()

simple_dispersal(distance_decay = 0.5)

kernel_function_dispersal(kernel_fun = function(r) exp(-r/distance_decay),
  distance_decay = 0.5)

cellular_automata_dispersal(dispersal_parameters)

fast_fourier_dispersal(dispersal_parameters)

pop_translocation(source_layer, sink_layer, stages = NULL,
  effect_timesteps = NULL)

pop_density_dependence()
}
\arguments{
\item{population_dynamics_function}{A function that operates on a state object to change population at specified timesteps. User may enter a custom function or select a pre-defined module - see documentation.}

\item{x}{a population_dynamic object}

\item{...}{further arguments passed to or from other methods}

\item{pop_change}{a function to define how population growth occurs (default is simple) at each timestep}

\item{pop_disp}{a function to define how the population disperses at each timestep}

\item{pop_mod}{a function to define any deterministic changes to the population - such as translocation - at each timestep}

\item{pop_dens_dep}{a function to control density dependence effects on the population at each timestep}

\item{distance_decay}{controls the distance at which the population disperses}

\item{kernel_fun}{a user-defined distance dispersal kernel function}

\item{dispersal_parameters}{a list of parameters that control how populations disperse}

\item{source_layer}{a spatial layer with the locations and number of individuals to translocate from - note, this layer will only have zero values if individuals are being introduced from outside the study area}

\item{sink_layer}{a spatial layer with the locations and number of individuals to translocate to}

\item{stages}{which life-stages are affected by the translocations - note, default is all}

\item{effect_timesteps}{which timesteps in a single simulation do the translocations take place}
}
\value{
An object of class \code{population_dynamics}
}
\description{
A 'population dynamics' object is used to modify species populations in space and time.
It is a sub-component of a \link[steps]{dynamics} object and is executed in each timestep of an experiment.
}
\examples{

library(steps)
library(raster)

r <- raster(system.file("external/test.grd", package="raster"))

mat <- matrix(c(0.000,0.000,0.302,0.302,
                0.940,0.000,0.000,0.000,
                0.000,0.884,0.000,0.000,
                0.000,0.000,0.793,0.793),
              nrow = 4, ncol = 4, byrow = TRUE)
colnames(mat) <- rownames(mat) <- c('Stage_1','Stage_2','Stage_3','Stage_4')

pop <- stack(replicate(4, ceiling(r * 0.2)))

pop_source <- r
pop_source[!is.na(r)] <- 0
pop_source[!is.na(r) & r >= 1200] <- 100

pop_sink <- r
pop_sink[!is.na(r)] <- 0
pop_sink[sample(which(!is.na(getValues(r)) & getValues(r) < 200),
                length(pop_source[!is.na(r) & r >= 1200]))] <- 100

hab_suit <- r / cellStats(r, "max")

k <- ceiling(hab_suit * 10)

dp_params <- list(dispersal_distance=list('Stage_1'=0,
                                          'Stage_2'=10,
                                          'Stage_3'=10,
                                          'Stage_4'=0),
                  dispersal_kernel=list('Stage_1'=0,
                                        'Stage_2'=exp(-c(0:9)^1/3.36),
                                        'Stage_3'=exp(-c(0:9)^1/3.36),
                                        'Stage_4'=0),
                  dispersal_proportion=list('Stage_1'=0,
                                            'Stage_2'=0.35,
                                            'Stage_3'=0.35*0.714,
                                            'Stage_4'=0)
                  )

test_habitat <- build_habitat(habitat_suitability = hab_suit,
                              carrying_capacity = k)
test_demography <- build_demography(transition_matrix = mat,
                                    dispersal_parameters = rlnorm(1))

test_demography_dp <- build_demography(transition_matrix = mat,
                                    dispersal_parameters = dp_params)
test_population <- build_population(pop)

test_state <- build_state(test_habitat, test_demography, test_population)

test_state_dp <- build_state(test_habitat,
                             test_demography_dp,
                             test_population)
                             
example_function <- function (state, timestep) {
  state
}

example_function <- as.population_dynamics(example_function)

# Test if object is of the type 'population dynamics'
  
is.population_dynamics(example_function)

print(example_function)

# Use the population_dynamics object to modify the  
# population with population change, dispersal, density dependence,
# and population modification functions:

example_function <- population_dynamics()
test_state2 <- example_function(test_state, 1)

par(mfrow=c(1,2))
plot(test_state$population$population_raster[[2]])
plot(test_state2$population$population_raster[[2]])

# Use the simple growth function to modify the  
# population using life-stage transitions:

test_lin_growth <- simple_growth()

# Use the demographic stochasticity function to modify the  
# population using random variation:

test_dem_stoch <- demographic_stochasticity()

# Use the simple dispersal function to modify the  
# population using a diffusion kernel:

test_sim_dispersal <- simple_dispersal()

# Use the kernel-based dispersal function to modify the  
# population using a user-defined diffusion distribution:

test_kern_dispersal <- kernel_function_dispersal()

# Use the cellular automata dispersal function to modify  
# the population using rule-based cell movements:

test_ca_dispersal <- cellular_automata_dispersal()

# Use the fast fourier dispersal function to modify the  
# population using rule-based cell movements:

test_fft_dispersal <- fast_fourier_dispersal()

# Use the translocation_population_dynamics object to modify the  
# population using translocations:

test_ca_dispersal <- pop_translocation(source_layer = pop_source,
                                       sink_layer = pop_sink,
                                       stages = NULL,
                                       effect_timesteps = 1)

# Use the translocation_population_dynamics object to modify the  
# population using translocations:

test_pop_dd <- pop_density_dependence()
}
