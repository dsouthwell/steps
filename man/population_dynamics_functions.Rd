% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/population_dynamics-functions.R
\name{simple_growth}
\alias{simple_growth}
\alias{fast_kernel_dispersal}
\alias{probabilistic_kernel_dispersal}
\alias{cellular_automata_dispersal}
\alias{pop_translocation}
\alias{pop_density_dependence}
\title{Functions to modify the population in a state object.}
\usage{
simple_growth(demo_stoch = FALSE)


  fast_kernel_dispersal(dispersal_kernel = exponential_dispersal_kernel(distance_decay
  = 0.1), dispersal_proportion = list(0, 0.35, 0.35 * 0.714, 0))


  probabilistic_kernel_dispersal(dispersal_kernel = exponential_dispersal_kernel(distance_decay
  = 0.1), dispersal_proportion = list(0, 0.35, 0.35 * 0.714, 0),
  arrival_probability = "both", stages = NULL, demo_stoch = FALSE)

cellular_automata_dispersal(dispersal_distance = list(0, 10, 10, 0),
  dispersal_kernel = list(0, exp(-c(0:9)^1/3.36), exp(-c(0:9)^1/3.36),
  0), dispersal_proportion = list(0, 0.35, 0.35 * 0.714, 0),
  barrier_type = 0, dispersal_steps = 1, use_barriers = FALSE,
  barriers_map = NULL, arrival_probability = "habitat_suitability",
  carrying_capacity = "carrying_capacity")

pop_translocation(source_layer, sink_layer, stages = NULL,
  effect_timesteps = NULL)

pop_density_dependence(stages = NULL)
}
\arguments{
\item{demo_stoch}{should demographic stochasticity be used in population change? (default is FALSE)}

\item{dispersal_kernel}{a single or list of user-defined distance dispersal kernel functions}

\item{dispersal_proportion}{proportions of individuals (0 to 1) that can disperse in each life stage}

\item{arrival_probability}{a raster layer that controls where individuals can disperse to (e.g. habitat suitability)}

\item{stages}{which life-stages contribute to density dependence or are affected by the translocations - default is all}

\item{dispersal_distance}{the distances (in cell units) that each life stage can disperse}

\item{barrier_type}{if barrier map is used, does it stop (0 - default) or kill (1) individuals}

\item{dispersal_steps}{number of dispersal steps to take before stopping}

\item{use_barriers}{should dispersal barriers be used? If so, a barriers map must be provided}

\item{barriers_map}{a raster layer that contains cell values of 0 (no barrier) and 1 (barrier)}

\item{carrying_capacity}{a raster layer that specifies the carrying capacity in each cell}

\item{source_layer}{a spatial layer with the locations and number of individuals to translocate from - note, this layer will only have zero values if individuals are being introduced from outside the study area}

\item{sink_layer}{a spatial layer with the locations and number of individuals to translocate to}

\item{effect_timesteps}{which timesteps in a single simulation do the translocations take place}
}
\description{
Pre-defined functions to operate on a population
during a simulation.
}
\examples{

library(steps)


# Use the simple growth function to modify the  
# population using life-stage transitions:

test_lin_growth <- simple_growth()

# Use the fast kernel-based dispersal function to modify the  
# population using a user-defined diffusion distribution and
# a fast-fourier transformation (FFT) computational algorithm:

test_kern_dispersal <- fast_kernel_dispersal()

# Use the probabilistic kernel-based dispersal function to modify the  
# population using a user-defined diffusion distribution
# and an arrival probability layers (e.g. habitat suitability):

test_kern_dispersal <- probabilistic_kernel_dispersal()

# Use the cellular automata dispersal function to modify  
# the population using rule-based cell movements:

test_ca_dispersal <- cellular_automata_dispersal()

# Use the translocation_population_dynamics object to modify the  
# population using translocations:

test_ca_dispersal <- pop_translocation(source_layer = pop_source,
                                       sink_layer = pop_sink,
                                       stages = NULL,
                                       effect_timesteps = 1)

# Use the translocation_population_dynamics object to modify the  
# population using translocations:

test_pop_dd <- pop_density_dependence()
}
