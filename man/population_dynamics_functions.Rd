% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/population_change-functions.R,
%   R/population_density_dependence-functions.R,
%   R/population_dispersal-functions.R, R/population_modification-functions.R
\name{population_dynamics_functions}
\alias{population_dynamics_functions}
\alias{growth}
\alias{population_cap}
\alias{fast_dispersal}
\alias{kernel_dispersal}
\alias{cellular_automata_dispersal}
\alias{translocation}
\title{How the population changes in a landscape.}
\usage{
growth(transition_matrix, demographic_stochasticity = TRUE,
  global_stochasticity = 0, local_stochasticity = 0)

population_cap(stages = NULL)


  fast_dispersal(dispersal_kernel = exponential_dispersal_kernel(distance_decay
  = 0.1), stages = NULL)

kernel_dispersal(distance_function = function(from, to)
  sqrt(rowSums(sweep(to, 2, from)^2)),
  dispersal_kernel = exponential_dispersal_kernel(distance_decay = 0.1),
  arrival_probability = c("both", "suitability", "carrying_capacity"),
  stages = NULL, demographic_stochasticity = FALSE)

cellular_automata_dispersal(dispersal_distance = list(0, 10, 10, 0),
  dispersal_kernel = list(0, exp(-c(0:9)^1/3.36), exp(-c(0:9)^1/3.36),
  0), dispersal_proportion = list(0, 0.35, 0.35 * 0.714, 0),
  barrier_type = 0, dispersal_steps = 1, use_barriers = FALSE,
  barriers_map = NULL, arrival_probability = "suitability",
  carrying_capacity = "carrying_capacity")

translocation(source_layer, sink_layer, stages = NULL,
  effect_timesteps = NULL)
}
\arguments{
\item{transition_matrix}{A symmetrical age-based (Leslie) or stage-based
population structure matrix.}

\item{demographic_stochasticity}{should demographic stochasticity be used in
population change?}

\item{global_stochasticity, local_stochasticity}{either scalar values or
matrices (with the same dimension as \code{transition_matrix}) giving
variability (in standard deviations) in the transition matrix either for
all populations (\code{global_stochasticity}) or for each population
separately (\code{local_stochasticity})}

\item{stages}{which life-stages contribute to density dependence - default is all}

\item{dispersal_kernel}{a single or list of user-defined distance dispersal
kernel functions}

\item{distance_function}{defines distance between source cells and all
potential sink cells for dispersal}

\item{arrival_probability}{a raster layer that controls where individuals can
disperse to (e.g. habitat suitability)}

\item{dispersal_distance}{the distances (in cell units) that each life stage
can disperse}

\item{dispersal_proportion}{proportions of individuals (0 to 1) that can
disperse in each life stage}

\item{barrier_type}{if barrier map is used, does it stop (0 - default) or
kill (1) individuals}

\item{dispersal_steps}{number of dispersal steps to take before stopping}

\item{use_barriers}{should dispersal barriers be used? If so, a barriers map
must be provided}

\item{barriers_map}{a raster layer that contains cell values of 0 (no
barrier) and 1 (barrier)}

\item{carrying_capacity}{a raster layer that specifies the carrying capacity
in each cell}

\item{source_layer}{a spatial layer with the locations and number of
individuals to translocate from - note, this layer will only have zero
values if individuals are being introduced from outside the study area}

\item{sink_layer}{a spatial layer with the locations and number of
individuals to translocate to}

\item{effect_timesteps}{which timesteps in a single simulation do the
translocations take place}

\item{demographic_stochasticity}{should demographic stochasticity be used in
dispersal?}

\item{stages}{which life-stages disperse - default is all}

\item{stages}{which life-stages are modified - default is all}
}
\description{
Pre-defined functions to define population change (e.g. growth) during a simulation.

Pre-defined functions to define population density dependence (e.g. cap) during a simulation.

Pre-defined functions to define population dispersal during a simulation.

Pre-defined functions to define population modification (e.g. translocation) during a simulation.
}
\examples{

# Use a function to modify the  
# population using life-stage transitions:

test_growth <- growth(egk_mat)

test_pop_dd <- population_cap()

# Use the fast kernel-based dispersal function to modify the  
# population using a user-defined diffusion distribution and
# a fast-fourier transformation (FFT) computational algorithm:

test_kern_dispersal <- fast_dispersal()

# Use the probabilistic kernel-based dispersal function to modify the  
# population using a user-defined diffusion distribution
# and an arrival probability layers (e.g. habitat suitability):

test_kern_dispersal <- kernel_dispersal()

# Use the cellular automata dispersal function to modify  
# the population using rule-based cell movements:

test_ca_dispersal <- cellular_automata_dispersal()

# Use the translocation_population_dynamics object to modify the  
# population using translocations:

test_ca_dispersal <- translocation(source_layer = pop_source,
                                       sink_layer = pop_sink,
                                       stages = NULL,
                                       effect_timesteps = 1)
}
