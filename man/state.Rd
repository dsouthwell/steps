% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/state-class.R
\name{build_state}
\alias{build_state}
\alias{is.state}
\alias{print.state}
\title{Create a state object}
\usage{
build_state(habitat, demography, population)

is.state(x)

\method{print}{state}(x, ...)
}
\arguments{
\item{habitat}{A habitat object - a habitat suitability raster layer or stack}

\item{demography}{A demography object - a stage-based transition matrix}

\item{population}{A population object - a raster stack with layers for each population stage}

\item{x}{an object to print or test as a state object}

\item{...}{further arguments passed to or from other methods}
}
\value{
An object of class \code{state}
}
\description{
A state object represents a static representation of habitat, population, and demography in a timestep.
It is modified in each timestep of an experiment based on the specified \link[dhmpr]{dynamic} objects.
}
\examples{

library(dhmpr)
library(raster)

r <- raster(system.file("external/test.grd", package="raster"))

test_habitat <- build_habitat(habitat_suitability = r / cellStats(r, "max"), carrying_capacity = ceiling(r * 0.1))
test_demography <- build_demography(transition_matrix = fake_transition_matrix(4), dispersal_parameters = rlnorm(1))
test_population <- build_population(stack(replicate(4, test_habitat$carrying_capacity * 0.2)))

test_state <- build_state(test_habitat, test_demography, test_population)

# Test if object is of the type 'state'
  
is.state(test_state)

print(test_state)
}
