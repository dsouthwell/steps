% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulation_results-class.R
\name{simulation}
\alias{simulation}
\alias{is.simulation_results}
\alias{print.simulation_results}
\alias{plot.simulation_results}
\title{Run an simulation to make spatially-explicit population projections}
\usage{
simulation(state, dynamics, timesteps, replicates = 1)

is.simulation_results(x)

\method{print}{simulation_results}(x, ...)

\method{plot}{simulation_results}(x, object = "population", type = "graph",
  stage = NULL, animate = FALSE, ...)
}
\arguments{
\item{state}{a state object - static habitat, population, and demography in a timestep}

\item{dynamics}{a dynamics object - modules that change habitat, population, and demography during a simulation}

\item{timesteps}{number of timesteps used in one simulation}

\item{replicates}{number simulations to perform}

\item{x}{an simulation_results object}

\item{...}{further arguments passed to or from other methods}

\item{object}{the state object to plot - can be 'population' (default), 'habitat_suitability' or 'carrying_capacity'}

\item{type}{the plot type - 'graph' (default) or 'raster'}

\item{stage}{life-stage to plot - must be specified for 'raster' plot types; default is NULL and all life-stages will be plotted}

\item{animate}{if plotting type 'raster' would you like to animate the rasters as a gif?}
}
\value{
An object of class \code{simulation_results}
}
\description{
A simulation changes state objects based on dynamics over a specified number of timesteps.
}
\examples{

library(steps)
library(raster)
library(future)
plan(multiprocess)

r <- raster(system.file("external/test.grd", package="raster"))

mat <- matrix(c(0.000,0.000,0.302,0.302,
                0.940,0.000,0.000,0.000,
                0.000,0.884,0.000,0.000,
                0.000,0.000,0.793,0.793),
              nrow = 4, ncol = 4, byrow = TRUE)
colnames(mat) <- rownames(mat) <- c('Stage_1','Stage_2','Stage_3','Stage_4')

pop <- stack(replicate(4, ceiling(r * 0.2)))

test_habitat <- build_habitat(habitat_suitability = r / cellStats(r, "max"),
                              carrying_capacity = ceiling(r * 0.1))
test_demography <- build_demography(transition_matrix = mat)
test_population <- build_population(pop)

test_state <- build_state(test_habitat, test_demography, test_population)

test_dynamics <- build_dynamics(habitat_dynamics(),
                                demography_dynamics(),
                                population_dynamics())

results <- simulation(test_state, test_dynamics, timesteps = 10, replicates = 2)

# Test if object is of the type 'simulation_results'

is.simulation_results(results)

print(results)

plot(results)
}
