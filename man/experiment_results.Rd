% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/experiment_results-class.R
\name{experiment}
\alias{experiment}
\alias{print.experiment_results}
\alias{is.experiment_results}
\alias{print.experiment_results}
\alias{plot.experiment_results}
\title{Run an experiment to make spatially-explicit population projections}
\usage{
experiment(state, dynamics, timesteps = 100)

\method{print}{experiment_results}(x, ...)

is.experiment_results(x)

\method{print}{experiment_results}(x, ...)

\method{plot}{experiment_results}(x, object = "population", type = "graph",
  stage = NULL, ...)
}
\arguments{
\item{state}{a state object - static habitat, population, and demography in a timestep}

\item{dynamics}{a dynamics object - modules that change habitat, population, and demography during and experiment}

\item{timesteps}{number of timesteps used in the experiment}

\item{x}{an experiment_reults object}

\item{...}{further arguments passed to or from other methods}

\item{object}{the state object to plot - can be 'population' (default), 'habitat_suitability' or 'carrying_capacity'}

\item{type}{the plot type - 'graph' (default) or 'raster'}

\item{stage}{life-stage to plot - must be specified for 'raster' plot types; default is NULL and all life-stages will be plotted}
}
\value{
An object of class \code{experiment_results}
}
\description{
A habitat object is used to store spatially-explicit information on habitat suitability and the carrying_capacity of a landscape.
It is a sub-component of a \link[steps]{state} object and is modified in each timestep of an experiment.
}
\examples{

library(steps)
library(raster)

r <- raster(system.file("external/test.grd", package="raster"))

mat <- matrix(c(0.000,0.000,0.302,0.302,
                0.940,0.000,0.000,0.000,
                0.000,0.884,0.000,0.000,
                0.000,0.000,0.793,0.793),
              nrow = 4, ncol = 4, byrow = TRUE)
colnames(mat) <- rownames(mat) <- c('Stage_1','Stage_2','Stage_3','Stage_4')

pop <- stack(replicate(4, ceiling(r * 0.2)))

test_habitat <- build_habitat(habitat_suitability = r / cellStats(r, "max"),
                              carrying_capacity = ceiling(r * 0.1))
test_demography <- build_demography(transition_matrix = mat,
                                    dispersal_parameters = rlnorm(1))
test_population <- build_population(pop)

test_state <- build_state(test_habitat, test_demography, test_population)

simple_approximation <- build_dynamics(no_habitat_dynamics,
                                       no_demography_dynamics,
                                       fast_population_dynamics)

results <- experiment(test_state, simple_approximation, timesteps = 10)
#sim_results <- simulation(test_state, simple_approximation, timesteps = 10, simulations=10)

print(results)

# Test if object is of the type 'experiment results'
  
is.experiment_results(results)

print(results)

plot(results)
}
